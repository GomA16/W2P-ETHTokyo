{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"4896735876507445083","abi":{"parameters":[{"name":"SCAddr","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"NF_state_k_next_next","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"baseid","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"k_next","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null,"error_types":{"5795655218219125583":{"error_kind":"string","string":"Field failed to decompose into specified 8 limbs"}}},"bytecode":"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","debug_symbols":"pdjLTiNJEIXhd/GaRWVcMjL7VUajFk27W0gWIDeMNGrx7mNT/+GysGfGrCLAlR8cu8Ih+/fm+/bb08+vt3c/7n9tvvzxe/Ntf7vb3f78uru/uX68vb87/Pb389VGP3593G+3h19t3j1+OPVwvd/ePW6+3D3tdlebv653Ty8X/Xq4vnupj9f7w6PL1WZ79/1QD+CP29322D1fvZ1eTh+NGhzOxV+P58fz7fT5NpzzbbZPnh+fOm/tkv/f/PV8XHbedD6XS87b69+3ecn5ajo/Lnn+bWn//vyduX966P/vaZecn5PztYwLzlemzvd5yfnXvz/s9P3nZ27APkJ3cNm7W8D+B1HzjWiXEf3TRL2NYs1+CWHVu+6mqriIGPZ2Q/s8ScwzL2nTC1LvgDb/8//gZrqp/PD+cEmMD0TYZUS9EfPkS2rniLHorvBh+fZcjI9EnJlP63o2u83lFHE2iKdeUvd+MsiZIR2hN9kxTr7JWp19l9MTYYu9u7efn/88/HB9c7v/sJg3zcbh0atDnWv1hdqodvhnjtWpQU1q57qi4jleLOt10ah4gRfBdUnFC7wYXDfXmniJl7Zel07FS7zsXFdUvMTr5O3k7Xgdr5O3k7fjdbxO3k7ewiu8Im+Rt/AKr8hb5C28whvkHeQdeANvkHeQd+ANvEHeQd6JN/EmeSd5J97Em+Sd5J14c/VsWfMebjyqUZ0aXJfUTi3q4Lo1rzW8htfWvIelTcVreK1zXVHxGp6tec0aFc/wLLguqXiGZ4PryOt4jufkdfI6nuM5eZ28jud4Qd4gb+AFXpA3yBt4gRfkDfImXuIleZO8iZd4Sd4kb+IlXidvJ2/H63idvJ28Ha/jdfJ28hZe4RV5i7yFV3hF3iJv4RXeIO8g78AbeIO8g7wDb+AN8g7yTryJN8k7yTvxJt4k7yTvxJur58ua15dGNapTg+uS2qlFHVy35vWG1/DamtebU/EaXutcV1S8hmdrXrdGxTM8C65LKp7hsT+c/eHsD2d/OPvD2R/O/nD2h7M/nP3h7A9nfzj7w9kfzv5w9oezP5z94ewPZ384+8PZH87+cPaHsz+c/eHsD2d/OPvD2R/O/nD2h7M/nP3h7A9nfzj7w9kfzv5w9oezP5z94ewPZ384+8PZH87+cPaHsz+c/eHsD2d/+HE+Wh2bpsbUuJpQk2q6mlIz1EyaKXlKnpKn5Cl5Sp6Sp+QpeSLHsqhpakyNqwk1qaarKTVDjeQmuUlukpvkJrlJbpKb5Ca5STbJJtkkm2STbJJNskk2ySbZJbtkl+ySXbJLdsku2SW75JAckkNySA7JITkkh+SQHJJTckpOySk5JafklJySU3JK7pK75C65S+6Su+QuuUvukrvkklySS3JJLskluSSX5JJckjWDoRkMzWBoBkMzGJrB0AyGZjA0g6EZDM1gaAZDMxiawdAMhmYwNIOhGQzNYGgGUzOYmsHUDKZmMDWDqRlMzWBqBlMzmJrB1AymZjCPM2jLsfHj10vHJtSkmq6m1Aw1k+Y4g2vT1JgaySbZJJtkk2ySTbJLdsku2SW7ZJfskl2yS3bJITkkh+SQHJJDckgOySE5JKfklJySjzN4/BiZxxlcm1TT1ZSaoWbSHGdwbZoaUyO5S+6Su+QuuUvukktySS7JJbkkl+SSXJJLckkekofkIXlIHi/y8/Hj9f72+ttu+2v97vrH093Nu6+yH/9+0CP6svthf3+z/f603x4/Xb88dvi8/Q8=","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"50":{"source":"use keccak256::keccak256;\n\nfn increment_bytes32(input: [u8;32]) -> [u8;32] {\n    let mut out: [u8;32] = input;\n    let mut carry: u8 = 1;\n\n    for i in 0..32 {\n        let sum: u16 = input[i] as u16 + carry as u16;\n        out[i] = (sum & 0xFF) as u8;\n        carry = if sum > 0xFF { 1 } else { 0 };\n    }\n\n    out\n}\n\nfn main(\n    SCAddr: pub [u8;32],\n    NF_state_k_next_next: pub [u8;32],  // NF_state_{k+2}\n    baseid: [u8;32],\n    k_next: [u8;32],\n) {\n    let k_next_next = increment_bytes32(k_next);\n\n    // state_{k+2} = keccak256(baseid || SCAddr || k+2)\n    let mut state_input: [u8;96] = [0;96];\n    for i in 0..32 { state_input[i] = baseid[i]; }\n    for i in 0..32 { state_input[32 + i] = SCAddr[i]; }\n    for i in 0..32 { state_input[64 + i] = k_next_next[i]; }\n\n    let expected_state = keccak256(state_input, 96u32);\n\n    assert(NF_state_k_next_next == expected_state);\n}\n","path":"/Users/maruyamashuntaira/W2P-ETHTokyo/contract/circuits/repayCircuit3/src/main.nr"},"52":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/Users/maruyamashuntaira/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}