{"noir_version":"1.0.0-beta.12+9a5b3695b42e391fa27c48e87b9bbb07523d664d","hash":"8208138589927716924","abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+2azW7aQBDHF7AN5iMQyGeDVKm3thcDBtMbhyQkeQsnFKmXqqr6AH7PXto3aVbdWcaTtVrkGdVSGcla2/v3b8a7s5td4praWc2UninrqthWpozK2UT7DIR9CHGnQtyZEDcW4s6FuAu1j0Hy/jRlaMo6qm/wBTcJiV9O/jKKH0PH+zHGPwsRU4CfAN+T4UdNw7nO8nxF/DaIjj6DNTdIc4M0mH2LNLcFmjXSrAs0d0hzV6C5R5r7As0D0jwQTQ+dg10bDfSPxPh4zt+5cP8veqQdFHpP8O3L+E5qxJ9S+dxTxH9biY61SY34g3ho+0Bf90CT7eKhdV728j2gzkd10L+t5+M10rlyC3Tv0Pl7cw59JjmfSuW7tpEjfuxLWzNT1qA9GugetCu0cwvrSV2I6rws76dtrj3kB7MgDp/o35rrvikD9Aw8P3D4D4j/XNyOe7RdQoc+dOj1QvGNOe+YQ+fQd3hGvRxn+liZ66iUJY+uOY2PP5265i0+/sLGH8jwPwC/KcP/CPyWDD8GfijCn6XAb8vEPwF+Ryb/bX52Zfg2f3oi/OkT8I9k2t/y+zJ8u6YayPDtmv1Ypn/t+BrKxL8E/kiEP1sA/0SmfSLgn8rwbf6cyfDtnvJchm/z80Kmf23+XMrEv4F18Su1M7pnuUL3+dan8fJv9yzgv01ildqzXJF4aPvgfYmuGztiHTjq6Bpw7PAzdvhxsTxGls/IChhZTUZWi5HF2fZhReNqM7I6FWVxvmOXkcXZj72KxnXEyOozsjjnnAEj65iRNWRkVXUuHDGyqjqGOHOCc/46YWRxju2q5uphXfjv5ujDunA/1ikji7MfzxhZnLnKuQbgbC/OeZVzDFV1nuD8W8vZ9pz5xRkX5z7tf9gPnTOyOMcQ59g+7GH2Y10wsi4FWK7/bWtbmTIqaRCr54i17ogV9K5vTly/33aR9svXT5+/KWLYMcDxOdQHBQGsyfONAi7l4+vgD/VrB0tPvpCIXpb3vzL3oxKWLH93jjb4CMRX+Q97FPHvE/0Pc41/hIPSKxHnNkkn21m6TefpZhM/pUPC11ZH7fQLTkTaYG4sAAA=","debug_symbols":"ndXdSuNQGIXhe8lxD7K+nf3nrYhIrFECIS2xHRik9z6J31udYSiIJy77s5+Wslby3jwPT+fXx3F+Obw1d/fvzdMyTtP4+jgd9v1pPMzrs+9Nu/3puuZOu6aLHskjexSP+hGx9ZCHeQQPV6Ir0ZXoSnQlupJcSa4kV5IryZXkSnIluZJcSa5kV7Ir2ZXsSnYlu5Jdya5kV7IrxZXiSnGluFJcKa4UV4orxZXiSnWlulJdqa5UV6or1ZXqSnWluqK2JUUaGciOjGQiM1lIPOEJT3jCE57whCc84QnP8AzP8AzP8AzP8AzP8Awv4AW8gBfwAl7AC3gBL+AFvA6vw+vwOjyKLpouqi66Lsou2i7qLvouCi8aLyovOi9KL1ovai96L4ovmi+qL7ovyi/aL+ov+i8GIBYgJiA2IEYgViBmIHYghiCWIKYgtiDGINYg5iD2IAYhFiEmITYhRiFWIWYhdiGGIZYhpiG2IcYh1iHmIfZh7MPYh7EPYx/GPox9GPsw9mHsw9iHsQ9jH8Y+jH3Ytg/bMpKJXD27XHbN9Vr6eFqGYbuU/nVxXS+5x34Z5lNzN5+nadf86qfzx5vejv38kad+WV9td80wP6+5gi/jNGz/XXZfp9vbR0sVh6uFz+Nm3z2fu8z5XNofnC92/fiv0/Hfbx9un44pVM7HFO1TCN//+teP7259fPzJj/ewPur34/LfvTJdNm4Z+6dp2J7bTp3n/fUt68PT7+P1lesN97gc9sPzeRk27uuuu3bsPmjX6WG7Yq8PTHVn1j1cti/wBw==","file_map":{"22":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n","path":"std/lib.nr"},"50":{"source":"fn main() {\n    let x: [u8;2] = [1,2];\n    let y: [u8;4] = [3,4,5,6];\n    println(x.concat(y));\n}\n\n\n","path":"/Users/masanari/work/zk/W2P-ETHTokyo/contract/scripts/noirTest/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained"]}